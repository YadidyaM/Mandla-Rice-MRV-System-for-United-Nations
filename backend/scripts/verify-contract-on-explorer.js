import 'dotenv/config';
import { ethers } from 'ethers';

const main = async () => {
  try {
    console.log('üîç Verifying Contract on Polygon Amoy Explorer...\n');
    
    const contractAddress = process.env.CARBON_CREDIT_CONTRACT_ADDRESS || "0x851a15a57F6fE3E2390e386664C7d9fC505Ca207";
    
    console.log('üìç Contract Address:', contractAddress);
    console.log('üîó Polygon Amoy Explorer URL:');
    console.log(`   https://amoy.polygonscan.com/address/${contractAddress}`);
    
    console.log('\nüìù What to check on the explorer:');
    console.log('   1. ‚úÖ Contract Creation Transaction');
    console.log('   2. ‚úÖ Contract Code (should show bytecode)');
    console.log('   3. ‚úÖ Contract Verification Status');
    console.log('   4. ‚úÖ Contract Type (should be ERC1155 compatible)');
    console.log('   5. ‚úÖ Transaction History');
    
    console.log('\nüéØ If the contract shows:');
    console.log('   ‚Ä¢ ‚úÖ "Contract" tab with bytecode ‚Üí Contract is deployed');
    console.log('   ‚Ä¢ ‚úÖ Creation transaction ‚Üí Successfully deployed');
    console.log('   ‚Ä¢ ‚ùå "Not verified" ‚Üí Need to verify on explorer');
    console.log('   ‚Ä¢ ‚ùå "No code" ‚Üí Wrong address or network');
    
    const provider = new ethers.JsonRpcProvider(process.env.WEB3_PROVIDER_URL);
    
    // Get basic info
    const code = await provider.getCode(contractAddress);
    const balance = await provider.getBalance(contractAddress);
    const txCount = await provider.getTransactionCount(contractAddress);
    
    console.log('\nüìä On-chain Verification:');
    console.log(`   Code Size: ${(code.length - 2) / 2} bytes`);
    console.log(`   Balance: ${ethers.formatEther(balance)} MATIC`);
    console.log(`   Tx Count: ${txCount}`);
    
    if (code === '0x') {
      console.log('\n‚ùå NO CONTRACT FOUND!');
      console.log('   This address has no smart contract code.');
      console.log('   Please check:');
      console.log('   ‚Ä¢ Correct network (Polygon Amoy)');
      console.log('   ‚Ä¢ Correct address from Remix deployment');
      console.log('   ‚Ä¢ Deployment transaction was successful');
    } else {
      console.log('\n‚úÖ CONTRACT VERIFIED ON-CHAIN');
      console.log('   The contract exists and has code.');
      console.log('   Issue might be with ABI or function calls.');
      
      console.log('\nüîß Troubleshooting Steps:');
      console.log('   1. Verify contract on PolygonScan for better debugging');
      console.log('   2. Check if contract constructor completed successfully');
      console.log('   3. Ensure contract is not in a failed state');
      console.log('   4. Try calling functions from PolygonScan "Read Contract" tab');
    }
    
    console.log('\nüåê Additional Resources:');
    console.log('   ‚Ä¢ Polygon Amoy Faucet: https://faucet.polygon.technology/');
    console.log('   ‚Ä¢ Polygon Amoy RPC: https://polygon-amoy.g.alchemy.com/v2/');
    console.log('   ‚Ä¢ PolygonScan Amoy: https://amoy.polygonscan.com/');
    
  } catch (error) {
    console.error('‚ùå Verification failed:', error.message);
    process.exit(1);
  }
};

main();
